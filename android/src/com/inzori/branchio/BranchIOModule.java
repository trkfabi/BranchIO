/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.inzori.branchio;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import android.app.Activity;
import android.net.Uri;
import android.content.Intent;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.proxy.ActivityProxy;
import org.appcelerator.titanium.proxy.IntentProxy;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Iterator;

import io.branch.indexing.BranchUniversalObject;
import io.branch.referral.Branch;
import io.branch.referral.BranchError;
import io.branch.referral.util.LinkProperties;
import io.branch.referral.util.BranchEvent;

@Kroll.module(name="BranchIO", id="com.inzori.branchio")
public class BranchIOModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "BranchIOModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public BranchIOModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.w(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		// Branch logging for debugging
		Branch.enableLogging();

		// Branch object initialization
		Branch.getAutoInstance(TiApplication.getInstance());

	}

	@Kroll.method
	public void initSession()
	{
		Log.w(LCAT, "start init");
		final Activity activity = this.getActivity();

		Branch.sessionBuilder(activity).withCallback(new Branch.BranchUniversalReferralInitListener() {
			@Override
			public void onInitFinished(BranchUniversalObject branchUniversalObject, LinkProperties linkProperties, BranchError error) {
				if (error != null) {
					Log.e("BranchSDK_Tester", "branch init failed. Caused by -" + error.getMessage());
				} else {
					Log.w("BranchSDK_Tester", "branch init complete!");
					if (branchUniversalObject != null) {
						Log.w("BranchSDK_Tester", "title " + branchUniversalObject.getTitle());
						Log.w("BranchSDK_Tester", "CanonicalIdentifier " + branchUniversalObject.getCanonicalIdentifier());
						Log.w("BranchSDK_Tester", "metadata " + branchUniversalObject.getContentMetadata().convertToJson());
					}

					if (linkProperties != null) {
						Log.w("BranchSDK_Tester", "Channel " + linkProperties.getChannel());
						Log.w("BranchSDK_Tester", "control params " + linkProperties.getControlParams());
					}
				}
			}
		}).withData(activity.getIntent().getData()).init();
	}
	@Kroll.method
	public void updateIntent(IntentProxy obj)
	{
		Log.w(LCAT, "update intent");
	}
	@Kroll.method
	public void disableTracking(boolean value) {
		Branch.getInstance().disableTracking(value);
	}

	@Kroll.method
	public KrollDict getLatestReferringParams()
	{
		Log.w(LCAT, "start getLatestReferringParams");
		final Activity activity = this.getActivity();

		JSONObject sessionParams = Branch.getInstance().getLatestReferringParams();
		if (sessionParams == null) {
			Log.w(LCAT, "return is null");
			return null;
		} else {
			Log.w(LCAT, "return is not null");
			Log.w(LCAT, sessionParams.toString());
		}

		return createSessionDict(sessionParams);
	}

	@Kroll.method
	public KrollDict getFirstReferringParams()
	{
		Log.w(LCAT, "start getFirstReferringParams");
		final Activity activity = this.getActivity();

		JSONObject installParams = Branch.getInstance().getFirstReferringParams();
		if (installParams == null) {
			Log.w(LCAT, "return is null");
			return null;
		} else {
			Log.w(LCAT, "return is not null");
			Log.w(LCAT, installParams.toString());
		}

		return createSessionDict(installParams);
	}

	@Kroll.method
	public void setIdentity(String identity)
	{
		Log.w(LCAT, "start setIdentity");
		final Activity activity = this.getActivity();

		Branch.getInstance().setIdentity(identity);
	}

	@Kroll.method
	public void userCompletedAction(String action)
	{
		Log.w(LCAT, "start userCompletedAction");
		final Activity activity = this.getActivity();

		new BranchEvent(action)
				.setCustomerEventAlias(action)
				.logEvent(activity);

	}

	@Kroll.method
	public void logout()
	{
		Log.w(LCAT, "start logout");
		final Activity activity = this.getActivity();

		Branch.getInstance().logout(new LogoutListener());
	}

	// Private Methods
	private KrollDict createSessionDict(JSONObject data) {
		Log.d(LCAT, "start createSessionDict");
		KrollDict sessionDict = new KrollDict();
		Log.d(LCAT, "data: ");
		Log.d(LCAT, data.toString());

		sessionDict = parseJSONObject(data);
		return sessionDict;
	}

	private KrollDict parseJSONObject(JSONObject jsonObject) {
		Log.w(LCAT, "start parseJSONObject");
		KrollDict dict = new KrollDict();
		Iterator<?> keys = jsonObject.keys();

		while(keys.hasNext()) {
			String key = (String)keys.next();
			Log.w(LCAT, "processing key: " + key);
			Log.w(LCAT, "key instance: " + jsonObject.opt(key).getClass().getName());
			if (jsonObject.opt(key) instanceof JSONObject) {
				Log.w(LCAT, "recursing...");
				JSONObject jsonObj;
				try {
					jsonObj = jsonObject.getJSONObject(key);
					KrollDict tempDict = new KrollDict();
					tempDict = parseJSONObject(jsonObj);
					dict.put(key, tempDict);
				}
				catch (JSONException exception) {
					Log.w(LCAT, "invalid json passed");
				}
			} else if (jsonObject.opt(key) instanceof JSONArray) {
				Log.w(LCAT, "processing jsonarray...");
				try {
					String[] stringArray = parseJSONArray(jsonObject.getJSONArray(key));
					dict.put(key, stringArray);
				}
				catch (JSONException exception) {
					Log.w(LCAT, "invalid jsonarray passed");
				}
			} else if (jsonObject.opt(key) == JSONObject.NULL) {
				Log.w(LCAT, "null object");
				dict.put(key, null);
			} else {
				Log.w(LCAT, "not recursing...");
				dict.put(key, jsonObject.opt(key));
			}
		}

		return dict;
	}

	private String[] parseJSONArray(JSONArray jsonArray) {
		Log.w(LCAT, "start parseJSONArray");
		ArrayList<Object> list = new ArrayList<Object>();
		if (jsonArray != null) {
			for (int i = 0; i < jsonArray.length(); i++) {
				try {
					Object value = jsonArray.get(i);
					if (value == JSONObject.NULL) {
						Log.w(LCAT, "null object");
						value = null;
					}
					list.add(value);
				} catch (JSONException exception) {
					Log.w(LCAT, "invalid object");
				}
			}
		}

		String[] stringArray = list.toArray(new String[list.size()]);

		return stringArray;
	}

	protected class LogoutListener implements Branch.LogoutStatusListener
	{
		@Override
		public void onLogoutFinished(boolean changed, BranchError error) {
			Log.w(LCAT, "inside onLogoutFinished");

			BranchIOModule self = BranchIOModule.this;
			KrollDict response = new KrollDict();

			if (error == null) {
				response.put("result", "success");
			} else {
				String errorMessage = error.getMessage();
				response.put("result", "error");
				response.put("message", errorMessage);
			}

			self.fireEvent("bio:logout", response);
		}
	}
}

